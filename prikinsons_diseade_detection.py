# -*- coding: utf-8 -*-
"""Prikinsons Diseade Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1euvDXQhYGHhx8m_WCacpKfnnZvgkQN8u

Importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import  accuracy_score

#loading the dataset from csv to pandas data frame
parkinsons_data = pd.read_csv('/content/Parkinsons_Speech-Features.csv')

parkinsons_data.head()

parkinsons_data.tail()

parkinsons_data.shape

#getting more information about data set
parkinsons_data.info()

# checking for missing values in each column
parkinsons_data.isnull().sum()

#delete row of missing values
parkinsons_data = parkinsons_data.dropna(how='any')

parkinsons_data.shape

#getting some statistical meaasures about dataset
parkinsons_data.describe()

#distribution of target variavle
parkinsons_data['class'].value_counts()

"""1  --> Parkinsons positiove

0  --> Healthy
"""

#grouping the dataset ont the target variable
parkinsons_data.groupby('class').mean()

"""Data Pre-processing

Separating the features and target
"""

x = parkinsons_data.drop(columns=['id', 'class'], axis=1)
y = parkinsons_data['class']

print(x)

print(y)

"""Splitting dataset int train and test"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=5)

print(x.shape, x_train.shape, x_test.shape)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(x_train)

x_train = scaler.transform(x_train)
x_test = scaler.transform(x_test)

print(x_test)

"""Model Training

Support Vector Machine Model
"""

model = svm.SVC(kernel='linear')

#training the svm model with training data
model.fit(x_train, y_train)

"""Model Evaluation

Accuracy score
"""

#accuracy score on training data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(y_train, x_train_prediction)

print('Accuracy score of training data : ', training_data_accuracy)

# accuracy score on training data
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(y_test, x_test_prediction)

print('Accuracy score of test data : ', test_data_accuracy)

"""Build a prediction system"""

